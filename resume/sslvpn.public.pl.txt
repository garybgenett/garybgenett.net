#!/usr/bin/perl
use strict;

###
### STEP 0 :: Verify that we have the necessary requirements.
###
### This script requires recent versions of Perl, OpenSSL and PPPD (including
### the 'chat' program), and that they all be in our PATH.  This script was
### written and tested with the following versions:
###	FirePass:	5.5 and 6.0
###	Perl:		5.8.8
###	OpenSSL:	0.9.8b
###	PPPD:		2.4.4

###
### STEP 1 :: Set up variables with the proper information to log in.
###

# Default values for the FQDN or IP of the FirePass we wish to connect to, the
# name of our Network Access favorite, and our username/pasword.  All of these
# can be passed as arguments, if desired.
my $host = $ARGV[0] || 'firepass.example.com';
my $name = $ARGV[1] || 'SSL VPN';
my $user = $ARGV[2] || 'user';
my $pass = $ARGV[3] || 'p@ssw0rd';

# Declare variables used throughout the rest of the script.
my($request, $response, $sessionid, $favorite);

# Store the OpenSSL command in a variable for convienence.
my $openssl = "openssl s_client -ign_eof -connect ${host}:443";

###
### STEP 2 :: Log in to FirePass.
###

# This is the bare minimum required in order to successfully log in.  A normal
# browser will make many more requests than this to complete the log in
# sequence, but all that is required is this POST with our credentails.  This
# may fail if the FirePass has End-Point Security Policies configured.
$request = "username=${user}&password=${pass}&mrhlogonform=1";
$request = "POST /my.activation.php3 HTTP/1.1\r\n"
	. "Host: ${host}\r\n"
	. "Content-Type: application/x-www-form-urlencoded\r\n"
	. "Content-Length: " . length($request) . "\r\n"
	. "Connection: close\r\n"
	. "\r\n"
	. "${request}\r\n";
$response = qx(echo "${request}" | ${openssl} 2>/dev/null);

# We can then parse the response for the MRHSession Cookie, which contains our
# SessionID.  In this example, we print out the SessionID in order to verify
# that our log in attempt worked.
$response =~ /MRHSession=(\w+);/;
$sessionid = $1;
print "SessionID: ${sessionid}\n";

###
### STEP 3 :: Create the SSL VPN tunnel.
###

# Now that we are authenticated and have a valid SessionID, we must request
# specific pages/objects in order to initiate a SSL VPN tunnel.  Before we do
# this, let's determine the resource locator for our Network Access favorite.
$request = "GET /vdesk/vpn/index.php3?outform=xml HTTP/1.0\r\n"
	. "Cookie: MRHSession=${sessionid}\r\n"
	. "\r\n";
$response = qx(echo "${request}" | ${openssl} 2>/dev/null);

# The response is XML, so we can safely grab what we are looking for using some
# regular expression magic.  Same with the SessionID, we're printing out the
# final value to make sure we're on the right track.
$response =~ /<name>${name}<\/name>\r\n<params>Z=\d+,(\d+).*<\/params>/;
$favorite = $1;
print "Favorite: ${favorite}\n";

# We're all set!  Let's visit the necessary pages/objects to notify FirePass
# that we wish to open a SSL VPN tunnel.
foreach my $uri (
	"/vdesk/",
	"/vdesk/vpn/connect.php3?Z=0,${favorite}",
) {
	$request = "GET ${uri} HTTP/1.0\r\n"
		. "Cookie: MRHSession=${sessionid}\r\n"
		. "\r\n";
	system("echo \"${request}\" | ${openssl} >/dev/null 2>&1");
}

# We are now authenticated, and have requested the necessary pre-tunnel
# pages/objects.  It's time to start our SSL VPN connection.  To do this, we are
# simply calling PPPD, and having it use OpenSSL as a psuedo terminal device.
$request = "GET /myvpn?sess=${sessionid} HTTP/1.0\r\n"
	. "Cookie: MRHSession=${sessionid}\r\n"
	. "\r\n";
$request = "chat -v '' '${request}'";
system("pppd noauth pty \"${openssl}\" connect \"${request}\"");

# Voila!  We should now have a PPP connection running over SSL.  We can exit
# from this script cleanly, and move on to setting up routes to the remote
# network using our favorite networking tools.  Happy hacking!
exit(0);

###
### End of file.
###
